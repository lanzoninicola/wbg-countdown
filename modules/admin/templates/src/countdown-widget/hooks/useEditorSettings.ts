import { useEffect, useState } from "react";

import useSettingsContext from "../../countdown-provider/hooks/settings/useSettingsContext";
import { findById } from "../../countdown-rest-api/services/widget/find-by-id";
import { ThemeStateData } from "../../countdown-provider/types/theme";
import { CountdownModel, CountdownSettingsAndTheme } from "../types";
import { SettingsStateData } from "../../countdown-provider/types/settings";
import useThemeContext from "../../countdown-provider/hooks/theme/useThemeContext";

interface UseEditorSettingsProps {
  /** if true load the mock data of the editor settings */
  isMockMode?: boolean;
  /** The current countdown rendered to the DOM by data-id attribute.
   * This value must be set to NULL if the component is used inside the editor
   */
  current?: CountdownModel["id"] | null | undefined;
}

// TODO: AbortController

export interface UseEditorSettingsAPIResponse {
  settings?: SettingsStateData;
  theme?: ThemeStateData;
  isLoading?: boolean;
  isError?: any;
}

/**
 * Retrieves the data generated by the editor through REST API call.
 *
 * @param isMockMode if true load the mock data of the editor settings. Set manually in dev environment.
 * @param current the current countdown ID
 *     *** WHEN WORKING WITH THE EDITOR ***
 *    - it is must set to NULL
 *
 *    *** WHEN WORKING WITH THE COUNTDOWN WIDGET ***
 *    - it is provided by the [data-id] attribute when the user add the shortcode with the id attribute in the page.
 */
export default function useEditorSettings({
  current,
}: UseEditorSettingsProps): UseEditorSettingsAPIResponse {
  const [isError, setIsError] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { setTargetDate, setTargetTimezone, setUnitLabelLanguage } =
    useSettingsContext();
  const { setTimer, setTitle } = useThemeContext();

  useEffect(() => {
    findById(current)
      .then((res) => {
        if (res.code === "error") {
          setIsError(true);
        }

        const { data } = res;

        if (data.payload) {
          const settingsParsed: CountdownSettingsAndTheme = JSON.parse(
            data.payload.settings
          );

          if (settingsParsed) {
            const {
              targetDate,
              targetTimezone,
              unitLabelLanguage,
              timer,
              title,
            } = settingsParsed;

            targetDate && setTargetDate(targetDate);
            targetTimezone && setTargetTimezone(targetTimezone);
            unitLabelLanguage && setUnitLabelLanguage(unitLabelLanguage);
            timer && setTimer(timer);
            title && setTitle(title);
          }
        }
        setIsLoading(false);
      })
      .catch(() => {
        setIsError(true);
      })
      .finally(() => setIsLoading(false));
  }, []);

  return {
    isLoading,
    isError,
  };
}
